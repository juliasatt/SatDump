name: Build All

on: [push]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Debug
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

permissions:
  contents: write

jobs:

  build_android:
    runs-on: android-release

    steps:
      - uses: actions/checkout@v4

      - name: Get dependency version
        id: android-deps-ver
        run: commit=$(git -C $GITHUB_WORKSPACE submodule status | grep android) && echo deps_version=${commit:1:6} >> $GITHUB_OUTPUT

      - name: Cache dependencies
        uses: actions/cache@v4
        id: android-deps
        with:
          path: android/deps
          key: android-deps-${{steps.android-deps-ver.outputs.deps_version}}

      - name: Build dependencies
        if: steps.android-deps.outputs.cache-hit != 'true'
        shell: bash
        run: git submodule update --init && cd $GITHUB_WORKSPACE/android/deps && export ANDROID_HOME=/home/owner/android-sdk-linux && sh build.sh && rm .git

      - name: Build
        shell: bash
        run: cd $GITHUB_WORKSPACE/android && export ANDROID_HOME=/home/owner/android-sdk-linux && sh /home/owner/build_release.sh

      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: SatDump-release.apk
          path: ${{runner.workspace}}/SatDump/android/app/build/outputs/apk/release/app-release.apk

  # Yes, since I was asked to do like SDR++ for this I did look at how Ryzerth has done it :-)
  update_nightly_release:
    needs: ["build_android"]
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}

    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v4

      - name: Install zip
        run: sudo apt install -y unzip

      - name: Copy files
        run: mkdir satdump_out && cp SatDump-release.apk/app-release.apk satdump_out/SatDump-Android.apk

      - name: Update Nightly
        run: gh release upload nightly satdump_out/* -R ${{github.repository}} --clobber
